info:
  title: The title of the API
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  version: 1.0.1
  description: >-
    A short description of the API. CommonMark syntax MAY be used for rich text
    representation.
  termsOfService: http://swagger.io/terms/
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      url: http://swagger.io
      description: Find out more
paths:
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "422":
          description: Validation exception

      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
            examples:
              cat:
                summary: An example of a cat
                value:
                  id: "1"
                  name: Fluffy
                  tags:
                    tag:
                      id: "3"
                      name: string
                  petType: Cat
                  color: White
                  gender: male
                  breed: Persian
        description: Update an existent pet in the store
        required: true
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
          description: Successful operation
        "400":
          description: Invalid input
        "422":
          description: Validation exception
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
        description: Create a new pet in the store
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      parameters:
        - in: path
          name: petId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of pet to return
      description: Returns a single pet
      operationId: getPetById
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      responses:
        "400":
          description: Invalid input
      parameters:
        - in: path
          name: petId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of pet that needs to be updated
        - in: query
          name: name
          schema:
            type: string
          description: Name of pet that needs to be updated
        - in: query
          name: status
          schema:
            type: string
          description: Status of pet that needs to be updated
      description: ""
      operationId: updatePetWithForm
    delete:
      tags:
        - pet
      summary: Deletes a pet
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      responses:
        "400":
          description: Invalid pet value
      parameters:
        - in: header
          name: api_key
          schema:
            type: string
          required: false
          description: ""
        - in: path
          name: petId
          schema:
            type: integer
            format: int64
          required: true
          description: Pet id to delete
      description: delete a pet
      operationId: deletePet
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      responses:
        "200":
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
                maxItems: 100
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
                maxItems: 100
          description: successful operation
        "400":
          description: Invalid status value
      parameters:
        - in: query
          name: status
          schema:
            enum:
              - available
              - pending
              - sold
            type: string
            default: available
          explode: true
          required: false
          description: Status values that need to be considered for filter
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      summary: uploads an image
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
          description: successful operation
      parameters:
        - in: path
          name: petId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of pet to update
        - in: query
          name: additionalMetadata
          schema:
            type: string
          required: false
          description: Additional Metadata
      description: ""
      operationId: uploadFile
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /users/detail:
    get:
      description: ''
      parameters: []
      responses:
        '200':
          description: OK
    options:
      description: ''
      parameters: []
      responses:
        '200':
          description: OK
security:
  - name: []

openapi: '3.0.2'
servers:
  - url: https://petstore.swagger.io
    description: Testing server
  - url: https://development.gigantic-server.com/v1
    description: Development server
  - url: https://staging.gigantic-server.com/v1
    description: Staging server
  - url: https://{username}.gigantic-server.com:{port}/{basePath}
    description: The production API server
    variables:
      port:
        enum:
          - "8443"
          - "443"
        default: "8443"
      basePath:
        default: v2
      username:
        default: demo
        description: >-
          this value is assigned by the service provider, in this example
          `gigantic-server.com`
components:
  schemas:
    Pet:
      xml:
        name: pet
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        tags:
          xml:
            wrapped: true
          type: array
          items:
            $ref: "#/components/schemas/Tag"
          maxItems: 100
        status:
          enum:
            - available
            - pending
            - sold
          type: string
          description: pet status in the store
        category:
          $ref: "#/components/schemas/Category"
        photoUrls:
          xml:
            wrapped: true
          type: array
          items:
            xml:
              name: photoUrl
            type: string
          maxItems: 100100100
    Tag:
      xml:
        name: tag
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Order:
      xml:
        name: order
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        status:
          enum:
            - placed
            - approved
            - delivered
          type: string
          example: approved
          description: Order Status
        complete:
          type: boolean
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
    Address:
      xml:
        name: address
      type: object
      properties:
        zip:
          type: string
          example: "94301"
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        street:
          type: string
          example: 437 Lytton
    Category:
      xml:
        name: category
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
    Customer:
      xml:
        name: customer
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        address:
          xml:
            name: addresses
            wrapped: true
          type: array
          items:
            $ref: "#/components/schemas/Address"
        username:
          type: string
          example: fehguy
    ApiResponse:
      xml:
        name: "##default"
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Pet:
      content:
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
      description: Pet object that needs to be added to the store
  securitySchemes:
    api_key:
      in: header
      name: api_key
      type: apiKey
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          scopes:
            read:pets: read your pets
            write:pets: modify pets in your account
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
externalDocs:
  url: http://swagger.io
  description: Find out more about Swagger
